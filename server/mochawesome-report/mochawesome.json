{
  "stats": {
    "suites": 5,
    "tests": 36,
    "passes": 36,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-20T20:53:10.319Z",
    "end": "2024-03-20T20:53:15.412Z",
    "duration": 5093,
    "testsRegistered": 36,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0d3d46af-af50-430a-aff7-751d740e7517",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a33db586-affc-42d2-8691-76dcdef910ed",
          "title": "Booking Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\booking.tests.js",
          "file": "\\tests\\booking.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return booking created message as success",
              "fullTitle": "Booking Routes Tests Suite should return booking created message as success",
              "timedOut": false,
              "duration": 991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "84360161-7bf1-4e5c-aed5-007ebd3d08ce",
              "parentUUID": "a33db586-affc-42d2-8691-76dcdef910ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center",
              "timedOut": false,
              "duration": 317,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "b45ec2bc-2794-4071-9833-f217d6a7552e",
              "parentUUID": "a33db586-affc-42d2-8691-76dcdef910ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by status",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by status",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get')\n  .send({ service_center_email: mock.mockObject.service_center_email, status : \"pending\" })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "63bcbe3c-587e-4bd1-91f3-449f2db98947",
              "parentUUID": "a33db586-affc-42d2-8691-76dcdef910ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by name",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by name",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get/name')\n  .send({ booking_name : mock.mockObject.booking_name, service_center_email: mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "a8729a08-2456-4fb8-b280-0c3f6d69e6e7",
              "parentUUID": "a33db586-affc-42d2-8691-76dcdef910ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by vehicle number",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by vehicle number",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get/vehicle/number')\n  .send({ customer_vehicle_number: mock.mockObject.customer_vehicle_number, service_center_email: mock.mockObject.service_center_email })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "adc8986c-5333-41eb-80df-7506996daa64",
              "parentUUID": "a33db586-affc-42d2-8691-76dcdef910ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the status of the booking",
              "fullTitle": "Booking Routes Tests Suite should set the status of the booking",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api + '/set/status')\n  .send({ id: \"00-00000\", status: \"accepted\" })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(res.body.modifiedCount,1, err)\n    done();\n  });",
              "err": {},
              "uuid": "f9154531-84fd-4b62-9fcd-880867136548",
              "parentUUID": "a33db586-affc-42d2-8691-76dcdef910ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete booking record that was created",
              "fullTitle": "Booking Routes Tests Suite should delete booking record that was created",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({id : \"00-00000\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(res.body.deletedCount,1,err)\n    \n    done();\n});",
              "err": {},
              "uuid": "dfa717ff-49f8-4509-ae46-e20b2fa184bd",
              "parentUUID": "a33db586-affc-42d2-8691-76dcdef910ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "84360161-7bf1-4e5c-aed5-007ebd3d08ce",
            "b45ec2bc-2794-4071-9833-f217d6a7552e",
            "63bcbe3c-587e-4bd1-91f3-449f2db98947",
            "a8729a08-2456-4fb8-b280-0c3f6d69e6e7",
            "adc8986c-5333-41eb-80df-7506996daa64",
            "f9154531-84fd-4b62-9fcd-880867136548",
            "dfa717ff-49f8-4509-ae46-e20b2fa184bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1829,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ed6ea04f-f736-4387-aea2-20f1d951109c",
          "title": "Customer Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\customer.tests.js",
          "file": "\\tests\\customer.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "dfaab970-b5a6-4eb5-87bb-e2674bceea4b",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer created message as success",
              "fullTitle": "Customer Routes Tests Suite should return customer created message as success",
              "timedOut": false,
              "duration": 253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "6c713643-ad4c-41a8-b47f-d50a4b491a23",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Customer Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "e3201d72-b5e1-44b8-b0c4-87936aee5e56",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as success",
              "fullTitle": "Customer Routes Tests Suite should return customer login as success",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"testuser@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "fbcde9df-339e-4c29-9403-960678e1ac14",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as Incorrect Username or Password",
              "fullTitle": "Customer Routes Tests Suite should return customer login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "bd776bb4-c66c-4ca3-b0ee-878ae3eb7a65",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Customer Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({email : \"testuser@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.vehicle_model,res.body.vehicle_model,err)\n    chai.assert.equal(mock.findObject.vehicle_number,res.body.vehicle_number,err)\n    chai.assert.equal(mock.findObject.vehicle_type,res.body.vehicle_type,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "6d3cb519-7ca7-4ecd-93f0-710cef44c703",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "b2a26439-0e4c-4a7f-8743-d2a3979177bc",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that mobile number needs 10 characters",
              "fullTitle": "Customer Routes Tests Suite should return that mobile number needs 10 characters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "048b5e7a-726a-44bf-ac3d-b8144c33c34d",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update/password')\n  .send({ email : \"testuser@gmail.com\" , old_password : \"testuser123\" , new_password : \"testuser1234\" , retype_new_password : \"testuser1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "570ced0e-134a-4591-9bfb-7071678d4036",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Customer Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update/password')\n  .send({ email : \"testuser@gmail.com\" , old_password : \"testuser123\" , new_password : \"testuser1234\" , retype_new_password : \"testuser1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "8f299011-c622-485f-a949-33f0444a14ca",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Customer Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({email : \"testuser@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "9098d9dc-3650-4e83-afe2-2d878b719f41",
              "parentUUID": "ed6ea04f-f736-4387-aea2-20f1d951109c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dfaab970-b5a6-4eb5-87bb-e2674bceea4b",
            "6c713643-ad4c-41a8-b47f-d50a4b491a23",
            "e3201d72-b5e1-44b8-b0c4-87936aee5e56",
            "fbcde9df-339e-4c29-9403-960678e1ac14",
            "bd776bb4-c66c-4ca3-b0ee-878ae3eb7a65",
            "6d3cb519-7ca7-4ecd-93f0-710cef44c703",
            "b2a26439-0e4c-4a7f-8743-d2a3979177bc",
            "048b5e7a-726a-44bf-ac3d-b8144c33c34d",
            "570ced0e-134a-4591-9bfb-7071678d4036",
            "8f299011-c622-485f-a949-33f0444a14ca",
            "9098d9dc-3650-4e83-afe2-2d878b719f41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1423,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "5da8d20a-6171-4d69-825c-d803118c65e3",
          "title": "Invoice Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\invoice.tests.js",
          "file": "\\tests\\invoice.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return invoice created message as success",
              "fullTitle": "Invoice Routes Tests Suite should return invoice created message as success",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "2d0a04fb-2121-4b43-9395-5292b7ef8a78",
              "parentUUID": "5da8d20a-6171-4d69-825c-d803118c65e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invoice records by center email",
              "fullTitle": "Invoice Routes Tests Suite should return invoice records by center email",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/serviceCenter')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.service_center_email,res.body[0].service_center_email,err)\n    done();\n});",
              "err": {},
              "uuid": "646d7184-82e5-41dc-80fb-7cc1a025fa84",
              "parentUUID": "5da8d20a-6171-4d69-825c-d803118c65e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invoice records by center email",
              "fullTitle": "Invoice Routes Tests Suite should return invoice records by center email",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(app)\n    .post(api + '/get/user')\n    .send({ customer_email: mock.mockObject.customer_email })\n    .end((err, res) => {\n        res.should.have.status(200);\n        chai.assert.equal(mock.findObject.customer_email, res.body[0].customer_email, err)\n        done();\n    });",
              "err": {},
              "uuid": "48cab089-f797-4cbf-b55e-a4c2e12b9e9a",
              "parentUUID": "5da8d20a-6171-4d69-825c-d803118c65e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service record that was created",
              "fullTitle": "Invoice Routes Tests Suite should delete service record that was created",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({service_center_email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\", res.body.message, err)\n    done();\n});",
              "err": {},
              "uuid": "60af3d9d-3ac4-4e0d-a516-a72197d06832",
              "parentUUID": "5da8d20a-6171-4d69-825c-d803118c65e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d0a04fb-2121-4b43-9395-5292b7ef8a78",
            "646d7184-82e5-41dc-80fb-7cc1a025fa84",
            "48cab089-f797-4cbf-b55e-a4c2e12b9e9a",
            "60af3d9d-3ac4-4e0d-a516-a72197d06832"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 343,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7e745309-b5d4-4483-9c04-0a7367bf9831",
          "title": "Service Center Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\serviceCenter.tests.js",
          "file": "\\tests\\serviceCenter.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return service center created message as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center created message as success",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "c3e6406a-ba23-40cd-a4c1-1de702cda0ba",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that service center email already exists",
              "fullTitle": "Service Center Routes Tests Suite should return that service center email already exists",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "a70635b8-fee8-4a28-8771-fdcd4fa2ad8c",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as success",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"testservicecenter@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "0741ee04-3ddc-41f0-b426-eae5ce20c89d",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as Incorrect Username or Password",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "e85c345f-370c-488f-9325-899f746a59b9",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center information by name",
              "fullTitle": "Service Center Routes Tests Suite should return the service center information by name",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/name')\n  .send({name : mock.mockObject.name})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "6b28addc-8b6a-4d3e-b318-808dd4264418",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center information by email",
              "fullTitle": "Service Center Routes Tests Suite should return the service center information by email",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/email')\n  .send({email : mock.mockObject.email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "5949cfcc-7150-4fcb-96e4-bb8ae7ecb2f3",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service centers by location",
              "fullTitle": "Service Center Routes Tests Suite should return the service centers by location",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/location')\n  .send({location : mock.mockObject.location})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "9d2f2fd7-34ac-4095-bff7-22a38b68fb14",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service centers by rating",
              "fullTitle": "Service Center Routes Tests Suite should return the service centers by rating",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/rating')\n  .send({rating : \"5\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "dfd3edb7-67d0-4b08-809f-574a2b332968",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update service center details and return success",
              "fullTitle": "Service Center Routes Tests Suite should update service center details and return success",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "29bf7195-d0a0-4759-9664-3d578adc8732",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service center record that was created",
              "fullTitle": "Service Center Routes Tests Suite should delete service center record that was created",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "e854b495-b076-4a67-be01-3041e5837940",
              "parentUUID": "7e745309-b5d4-4483-9c04-0a7367bf9831",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3e6406a-ba23-40cd-a4c1-1de702cda0ba",
            "a70635b8-fee8-4a28-8771-fdcd4fa2ad8c",
            "0741ee04-3ddc-41f0-b426-eae5ce20c89d",
            "e85c345f-370c-488f-9325-899f746a59b9",
            "6b28addc-8b6a-4d3e-b318-808dd4264418",
            "5949cfcc-7150-4fcb-96e4-bb8ae7ecb2f3",
            "9d2f2fd7-34ac-4095-bff7-22a38b68fb14",
            "dfd3edb7-67d0-4b08-809f-574a2b332968",
            "29bf7195-d0a0-4759-9664-3d578adc8732",
            "e854b495-b076-4a67-be01-3041e5837940"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "dedbefb3-bed5-4767-8518-f61d7e6a3dad",
          "title": "Service Record Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\serviceRecord.tests.js",
          "file": "\\tests\\serviceRecord.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return service record created message as success",
              "fullTitle": "Service Record Routes Tests Suite should return service record created message as success",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "86316680-0830-4bc6-a670-3ae220f3f7ce",
              "parentUUID": "dedbefb3-bed5-4767-8518-f61d7e6a3dad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center service records by center email",
              "fullTitle": "Service Record Routes Tests Suite should return the service center service records by center email",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/serviceCenter/records')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.service_center_email,res.body[0].service_center_email,err)\n    done();\n});",
              "err": {},
              "uuid": "6a951a76-7d67-4086-8514-c9a215a68adf",
              "parentUUID": "dedbefb3-bed5-4767-8518-f61d7e6a3dad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center service records by center email",
              "fullTitle": "Service Record Routes Tests Suite should return the service center service records by center email",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(app)\n    .post(api + '/get/user/records')\n    .send({ customer_email: mock.mockObject.customer_email })\n    .end((err, res) => {\n        res.should.have.status(200);\n        chai.assert.equal(mock.findObject.service_center_email, res.body[0].service_center_email, err)\n        done();\n    });",
              "err": {},
              "uuid": "e03b3920-766d-4b84-bac6-5ff1da090467",
              "parentUUID": "dedbefb3-bed5-4767-8518-f61d7e6a3dad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service record that was created",
              "fullTitle": "Service Record Routes Tests Suite should delete service record that was created",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({service_center_email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\", res.body.message, err)\n    done();\n});",
              "err": {},
              "uuid": "772d69a0-c574-43a5-b5a3-6cf3916fd1cf",
              "parentUUID": "dedbefb3-bed5-4767-8518-f61d7e6a3dad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86316680-0830-4bc6-a670-3ae220f3f7ce",
            "6a951a76-7d67-4086-8514-c9a215a68adf",
            "e03b3920-766d-4b84-bac6-5ff1da090467",
            "772d69a0-c574-43a5-b5a3-6cf3916fd1cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}