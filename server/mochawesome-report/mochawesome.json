{
  "stats": {
    "suites": 5,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-24T16:16:51.082Z",
    "end": "2024-03-24T16:16:57.213Z",
    "duration": 6131,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a0442652-0d32-40f7-b10b-eaad39f94eec",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
          "title": "Booking Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\booking.tests.js",
          "file": "\\tests\\booking.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return booking created message as success",
              "fullTitle": "Booking Routes Tests Suite should return booking created message as success",
              "timedOut": false,
              "duration": 1361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "00e62c40-218b-4664-ab6d-42afae8548c6",
              "parentUUID": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "b3525e35-78d7-4a97-a467-13d7b6593253",
              "parentUUID": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by status",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by status",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get')\n  .send({ service_center_email: mock.mockObject.service_center_email, status : \"pending\" })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "ec4f666b-916d-4c5a-8cd4-fc2de1510193",
              "parentUUID": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by name",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by name",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get/name')\n  .send({ booking_name : mock.mockObject.booking_name, service_center_email: mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "e224da7c-350b-4ecf-9279-d23e1ec2de19",
              "parentUUID": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by vehicle number",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by vehicle number",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get/vehicle/number')\n  .send({ customer_vehicle_number: mock.mockObject.customer_vehicle_number, service_center_email: mock.mockObject.service_center_email })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "29bfda87-cd1b-4ab3-9162-d8a8f7f43a8c",
              "parentUUID": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the status of the booking",
              "fullTitle": "Booking Routes Tests Suite should set the status of the booking",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api + '/set/status')\n  .send({ id: \"00-00000\", status: \"accepted\" })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(res.body.modifiedCount,1, err)\n    done();\n  });",
              "err": {},
              "uuid": "2d4184ac-8fba-4904-a1f9-d2fb30dee29b",
              "parentUUID": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete booking record that was created",
              "fullTitle": "Booking Routes Tests Suite should delete booking record that was created",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({id : \"00-00000\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(res.body.deletedCount,1,err)\n    \n    done();\n});",
              "err": {},
              "uuid": "b46c995d-a8c5-46ff-8a3d-3217d81db7f7",
              "parentUUID": "6aa2f7a8-4d61-41be-812c-818bc32aa912",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00e62c40-218b-4664-ab6d-42afae8548c6",
            "b3525e35-78d7-4a97-a467-13d7b6593253",
            "ec4f666b-916d-4c5a-8cd4-fc2de1510193",
            "e224da7c-350b-4ecf-9279-d23e1ec2de19",
            "29bfda87-cd1b-4ab3-9162-d8a8f7f43a8c",
            "2d4184ac-8fba-4904-a1f9-d2fb30dee29b",
            "b46c995d-a8c5-46ff-8a3d-3217d81db7f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2420,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
          "title": "Customer Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\customer.tests.js",
          "file": "\\tests\\customer.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "f0b48aee-6f18-42cb-b9f8-86e89e33d285",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer created message as success",
              "fullTitle": "Customer Routes Tests Suite should return customer created message as success",
              "timedOut": false,
              "duration": 275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "563c0e45-eee0-4401-b5a7-be000a0f8765",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Customer Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "6236f997-6690-41e5-b75d-c44d0439ad78",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as success",
              "fullTitle": "Customer Routes Tests Suite should return customer login as success",
              "timedOut": false,
              "duration": 162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"testuser@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "95185a91-a406-4827-93ce-3d7da4b37f75",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as Incorrect Username or Password",
              "fullTitle": "Customer Routes Tests Suite should return customer login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "c3c4293d-4712-4794-836e-6bd9f3e3866c",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Customer Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({email : \"testuser@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.vehicle_model,res.body.vehicle_model,err)\n    chai.assert.equal(mock.findObject.vehicle_number,res.body.vehicle_number,err)\n    chai.assert.equal(mock.findObject.vehicle_type,res.body.vehicle_type,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "95f62707-5092-44a9-8875-5d9a55da0f1d",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "885723ee-93e6-4b44-a821-1f6b92e447a1",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that mobile number needs 10 characters",
              "fullTitle": "Customer Routes Tests Suite should return that mobile number needs 10 characters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "c392f0a2-a599-46a2-bc12-6306ad15a14d",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update/password')\n  .send({ email : \"testuser@gmail.com\" , old_password : \"testuser123\" , new_password : \"testuser1234\" , retype_new_password : \"testuser1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "4e0d3b80-4597-448f-ae48-34223ac14d4c",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Customer Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update/password')\n  .send({ email : \"testuser@gmail.com\" , old_password : \"testuser123\" , new_password : \"testuser1234\" , retype_new_password : \"testuser1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "715d9110-a5ee-420b-9c92-df9b20879c23",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Customer Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({email : \"testuser@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "9c6e2757-96cc-46ad-a5d7-c72d44db423c",
              "parentUUID": "25754b46-51e5-4ad7-a5e9-3e9f63482647",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0b48aee-6f18-42cb-b9f8-86e89e33d285",
            "563c0e45-eee0-4401-b5a7-be000a0f8765",
            "6236f997-6690-41e5-b75d-c44d0439ad78",
            "95185a91-a406-4827-93ce-3d7da4b37f75",
            "c3c4293d-4712-4794-836e-6bd9f3e3866c",
            "95f62707-5092-44a9-8875-5d9a55da0f1d",
            "885723ee-93e6-4b44-a821-1f6b92e447a1",
            "c392f0a2-a599-46a2-bc12-6306ad15a14d",
            "4e0d3b80-4597-448f-ae48-34223ac14d4c",
            "715d9110-a5ee-420b-9c92-df9b20879c23",
            "9c6e2757-96cc-46ad-a5d7-c72d44db423c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1693,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "9bf577f0-457a-48a3-8c03-10a24d6f9f22",
          "title": "Invoice Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\invoice.tests.js",
          "file": "\\tests\\invoice.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return invoice created message as success",
              "fullTitle": "Invoice Routes Tests Suite should return invoice created message as success",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "ed0a6dfa-0a9e-41b0-9b68-92df0afc9968",
              "parentUUID": "9bf577f0-457a-48a3-8c03-10a24d6f9f22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invoice records by center email",
              "fullTitle": "Invoice Routes Tests Suite should return invoice records by center email",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/serviceCenter')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.service_center_email,res.body[0].service_center_email,err)\n    done();\n});",
              "err": {},
              "uuid": "db0793a5-4649-4744-8bb0-ac8eb77ec6f0",
              "parentUUID": "9bf577f0-457a-48a3-8c03-10a24d6f9f22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invoice records by center email",
              "fullTitle": "Invoice Routes Tests Suite should return invoice records by center email",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(app)\n    .post(api + '/get/user')\n    .send({ customer_email: mock.mockObject.customer_email })\n    .end((err, res) => {\n        res.should.have.status(200);\n        chai.assert.equal(mock.findObject.customer_email, res.body[0].customer_email, err)\n        done();\n    });",
              "err": {},
              "uuid": "9289d9d3-fd26-48a7-b29e-244a1e7e9df4",
              "parentUUID": "9bf577f0-457a-48a3-8c03-10a24d6f9f22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service record that was created",
              "fullTitle": "Invoice Routes Tests Suite should delete service record that was created",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({service_center_email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\", res.body.message, err)\n    done();\n});",
              "err": {},
              "uuid": "7e392247-930c-4ab2-8287-3976b9e241b2",
              "parentUUID": "9bf577f0-457a-48a3-8c03-10a24d6f9f22",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed0a6dfa-0a9e-41b0-9b68-92df0afc9968",
            "db0793a5-4649-4744-8bb0-ac8eb77ec6f0",
            "9289d9d3-fd26-48a7-b29e-244a1e7e9df4",
            "7e392247-930c-4ab2-8287-3976b9e241b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 391,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
          "title": "Service Center Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\serviceCenter.tests.js",
          "file": "\\tests\\serviceCenter.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return service center created message as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center created message as success",
              "timedOut": false,
              "duration": 274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "c7b96763-558f-4f71-a0ff-430bdf08e574",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that service center email already exists",
              "fullTitle": "Service Center Routes Tests Suite should return that service center email already exists",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "5e8bb53e-a4a9-4490-83e6-8996cafb20b2",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as success",
              "timedOut": false,
              "duration": 164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"testservicecenter@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "fe58d960-3b8e-497a-8ec6-8333a3fd9958",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as Incorrect Username or Password",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "028318bd-2841-442e-974e-07989ac564da",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center information by email",
              "fullTitle": "Service Center Routes Tests Suite should return the service center information by email",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/email')\n  .send({email : mock.mockObject.email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "d116dfe9-dcb8-441c-ac9e-18860c1ce01a",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service centers by location",
              "fullTitle": "Service Center Routes Tests Suite should return the service centers by location",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/location')\n  .send({location : mock.mockObject.location})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "8a48cc62-90d0-4e93-9378-ca8abb35327a",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update service center details and return success",
              "fullTitle": "Service Center Routes Tests Suite should update service center details and return success",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "59ae891e-38f1-4c7a-82d8-1e108944de87",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service center record that was created",
              "fullTitle": "Service Center Routes Tests Suite should delete service center record that was created",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "c1267398-22cf-45e1-a3a5-7ebb5c564f76",
              "parentUUID": "361b3cc2-705f-43d6-986e-4e6a84ce89ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7b96763-558f-4f71-a0ff-430bdf08e574",
            "5e8bb53e-a4a9-4490-83e6-8996cafb20b2",
            "fe58d960-3b8e-497a-8ec6-8333a3fd9958",
            "028318bd-2841-442e-974e-07989ac564da",
            "d116dfe9-dcb8-441c-ac9e-18860c1ce01a",
            "8a48cc62-90d0-4e93-9378-ca8abb35327a",
            "59ae891e-38f1-4c7a-82d8-1e108944de87",
            "c1267398-22cf-45e1-a3a5-7ebb5c564f76"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e4532a71-c656-4a99-8305-8d1153f987ec",
          "title": "Service Record Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\serviceRecord.tests.js",
          "file": "\\tests\\serviceRecord.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return service record created message as success",
              "fullTitle": "Service Record Routes Tests Suite should return service record created message as success",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "0ce96f76-1c17-4ae4-a956-37b66eafd619",
              "parentUUID": "e4532a71-c656-4a99-8305-8d1153f987ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center service records by center email",
              "fullTitle": "Service Record Routes Tests Suite should return the service center service records by center email",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/serviceCenter/records')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.service_center_email,res.body[0].service_center_email,err)\n    done();\n});",
              "err": {},
              "uuid": "b013190d-37f2-41bc-8a53-0b9b823b0847",
              "parentUUID": "e4532a71-c656-4a99-8305-8d1153f987ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center service records by center email",
              "fullTitle": "Service Record Routes Tests Suite should return the service center service records by center email",
              "timedOut": false,
              "duration": 158,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(app)\n    .post(api + '/get/user/records')\n    .send({ customer_email: mock.mockObject.customer_email })\n    .end((err, res) => {\n        res.should.have.status(200);\n        chai.assert.equal(mock.findObject.service_center_email, res.body[0].service_center_email, err)\n        done();\n    });",
              "err": {},
              "uuid": "46fa9511-0b56-49df-b4e1-3f3808eefb4b",
              "parentUUID": "e4532a71-c656-4a99-8305-8d1153f987ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service record that was created",
              "fullTitle": "Service Record Routes Tests Suite should delete service record that was created",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({service_center_email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\", res.body.message, err)\n    done();\n});",
              "err": {},
              "uuid": "1dd12808-83e0-4fed-9e29-e489d3d04f1b",
              "parentUUID": "e4532a71-c656-4a99-8305-8d1153f987ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ce96f76-1c17-4ae4-a956-37b66eafd619",
            "b013190d-37f2-41bc-8a53-0b9b823b0847",
            "46fa9511-0b56-49df-b4e1-3f3808eefb4b",
            "1dd12808-83e0-4fed-9e29-e489d3d04f1b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 476,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}