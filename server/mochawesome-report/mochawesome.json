{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-20T13:14:34.241Z",
    "end": "2024-03-20T13:14:37.827Z",
    "duration": 3586,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "952ebd86-5866-4131-b616-fd2e279ce494",
      "title": "",
      "fullFile": "C:\\Thenura\\Projects\\Shenal SDGP\\Project\\Error Folder\\autowa_application\\server\\tests\\serviceCenter.tests.js",
      "file": "\\tests\\serviceCenter.tests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
          "title": "Service Center Routes Tests Suite",
          "fullFile": "C:\\Thenura\\Projects\\Shenal SDGP\\Project\\Error Folder\\autowa_application\\server\\tests\\serviceCenter.tests.js",
          "file": "\\tests\\serviceCenter.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return service center created message as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center created message as success",
              "timedOut": false,
              "duration": 2128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "04c2304b-3d41-4f83-bbee-714e82924b1e",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that service center email already exists",
              "fullTitle": "Service Center Routes Tests Suite should return that service center email already exists",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "8ada8963-f2d8-46ae-8f38-fa165a260513",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as success",
              "timedOut": false,
              "duration": 333,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"testservicecenter@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "551681af-ae47-4125-82ff-e3e15d2ae481",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as Incorrect Username or Password",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "476f64c4-720d-458a-aa4d-3b056288ecc5",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center information by name",
              "fullTitle": "Service Center Routes Tests Suite should return the service center information by name",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/name')\n  .send({name : mock.mockObject.name})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "dabd9a66-f9f9-4185-900a-2a9c31f73a8d",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center information by email",
              "fullTitle": "Service Center Routes Tests Suite should return the service center information by email",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/email')\n  .send({email : mock.mockObject.email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "7778ddd1-8e86-49d7-a767-27088c1c46f7",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service centers by location",
              "fullTitle": "Service Center Routes Tests Suite should return the service centers by location",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/location')\n  .send({location : mock.mockObject.location})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "8ff2e798-4609-451e-8e7d-5625eaf841e7",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service centers by rating",
              "fullTitle": "Service Center Routes Tests Suite should return the service centers by rating",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/rating')\n  .send({rating : \"5\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "d396ff98-62f2-4b35-bc11-769aeb4d0249",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update service center details and return success",
              "fullTitle": "Service Center Routes Tests Suite should update service center details and return success",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "a826749c-a38f-45ab-a08f-66acc61723ed",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service center record that was created",
              "fullTitle": "Service Center Routes Tests Suite should delete service center record that was created",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "2fde7c3a-5f67-4058-bf67-cecde18e0c13",
              "parentUUID": "e66db058-cc0d-43a2-8a86-b3be2e3edce9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04c2304b-3d41-4f83-bbee-714e82924b1e",
            "8ada8963-f2d8-46ae-8f38-fa165a260513",
            "551681af-ae47-4125-82ff-e3e15d2ae481",
            "476f64c4-720d-458a-aa4d-3b056288ecc5",
            "dabd9a66-f9f9-4185-900a-2a9c31f73a8d",
            "7778ddd1-8e86-49d7-a767-27088c1c46f7",
            "8ff2e798-4609-451e-8e7d-5625eaf841e7",
            "d396ff98-62f2-4b35-bc11-769aeb4d0249",
            "a826749c-a38f-45ab-a08f-66acc61723ed",
            "2fde7c3a-5f67-4058-bf67-cecde18e0c13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3571,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}