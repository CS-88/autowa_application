{
  "stats": {
    "suites": 5,
    "tests": 36,
    "passes": 36,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-20T21:15:08.797Z",
    "end": "2024-03-20T21:15:15.199Z",
    "duration": 6402,
    "testsRegistered": 36,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "89b4f1b1-2150-4c9e-883b-d56cdef136e9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "30eac5d2-9b71-4145-b255-b050491295be",
          "title": "Booking Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\booking.tests.js",
          "file": "\\tests\\booking.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return booking created message as success",
              "fullTitle": "Booking Routes Tests Suite should return booking created message as success",
              "timedOut": false,
              "duration": 2250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "ebc7136c-cd1a-4dad-bb59-d63149df701a",
              "parentUUID": "30eac5d2-9b71-4145-b255-b050491295be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center",
              "timedOut": false,
              "duration": 328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "46d11aea-5d06-4f67-a509-746f96a1890d",
              "parentUUID": "30eac5d2-9b71-4145-b255-b050491295be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by status",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by status",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get')\n  .send({ service_center_email: mock.mockObject.service_center_email, status : \"pending\" })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "92d9b5e8-3df6-4640-a5a5-7d1186ae1e45",
              "parentUUID": "30eac5d2-9b71-4145-b255-b050491295be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by name",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by name",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get/name')\n  .send({ booking_name : mock.mockObject.booking_name, service_center_email: mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "408dee50-4250-4614-9f43-b3745831ef54",
              "parentUUID": "30eac5d2-9b71-4145-b255-b050491295be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the bookings in the service center by vehicle number",
              "fullTitle": "Booking Routes Tests Suite should return the bookings in the service center by vehicle number",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api + '/get/vehicle/number')\n  .send({ customer_vehicle_number: mock.mockObject.customer_vehicle_number, service_center_email: mock.mockObject.service_center_email })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id, res.body.id, err)\n    done();\n  });",
              "err": {},
              "uuid": "403730c4-aa32-4581-9878-7b2ed0ca5f93",
              "parentUUID": "30eac5d2-9b71-4145-b255-b050491295be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the status of the booking",
              "fullTitle": "Booking Routes Tests Suite should set the status of the booking",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api + '/set/status')\n  .send({ id: \"00-00000\", status: \"accepted\" })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(res.body.modifiedCount,1, err)\n    done();\n  });",
              "err": {},
              "uuid": "eb0d2b2d-7bf5-4da0-94f7-a860b8e4e58e",
              "parentUUID": "30eac5d2-9b71-4145-b255-b050491295be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete booking record that was created",
              "fullTitle": "Booking Routes Tests Suite should delete booking record that was created",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({id : \"00-00000\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(res.body.deletedCount,1,err)\n    \n    done();\n});",
              "err": {},
              "uuid": "64391e16-a24e-4411-b82a-7f0d68fbcb7c",
              "parentUUID": "30eac5d2-9b71-4145-b255-b050491295be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ebc7136c-cd1a-4dad-bb59-d63149df701a",
            "46d11aea-5d06-4f67-a509-746f96a1890d",
            "92d9b5e8-3df6-4640-a5a5-7d1186ae1e45",
            "408dee50-4250-4614-9f43-b3745831ef54",
            "403730c4-aa32-4581-9878-7b2ed0ca5f93",
            "eb0d2b2d-7bf5-4da0-94f7-a860b8e4e58e",
            "64391e16-a24e-4411-b82a-7f0d68fbcb7c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3084,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
          "title": "Customer Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\customer.tests.js",
          "file": "\\tests\\customer.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "915a8ff6-2268-438d-8ba4-677e36329cce",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer created message as success",
              "fullTitle": "Customer Routes Tests Suite should return customer created message as success",
              "timedOut": false,
              "duration": 263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "63e3d4ee-38af-4fe9-baab-73dc43232ca9",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Customer Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "f4ba5d3e-4329-467d-9fd0-bb2c4afa2aa9",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as success",
              "fullTitle": "Customer Routes Tests Suite should return customer login as success",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"testuser@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "858adbab-e067-479b-9874-eaaa25bf64e3",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as Incorrect Username or Password",
              "fullTitle": "Customer Routes Tests Suite should return customer login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "61077cd9-03a1-404b-a030-50fde7b8d693",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Customer Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({email : \"testuser@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.vehicle_model,res.body.vehicle_model,err)\n    chai.assert.equal(mock.findObject.vehicle_number,res.body.vehicle_number,err)\n    chai.assert.equal(mock.findObject.vehicle_type,res.body.vehicle_type,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "9b6af71d-e580-46d7-b828-8fbffb03aff1",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "e4357de8-2e92-477c-848e-191048198621",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that mobile number needs 10 characters",
              "fullTitle": "Customer Routes Tests Suite should return that mobile number needs 10 characters",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "58f65d86-4fef-4f4e-9e80-cfaa6a32f8ce",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update/password')\n  .send({ email : \"testuser@gmail.com\" , old_password : \"testuser123\" , new_password : \"testuser1234\" , retype_new_password : \"testuser1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "7ff1c4af-b4ff-43a1-9951-f053fe11fc82",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Customer Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update/password')\n  .send({ email : \"testuser@gmail.com\" , old_password : \"testuser123\" , new_password : \"testuser1234\" , retype_new_password : \"testuser1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "72a9d838-dddf-4e76-8a53-ddadf50a5258",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Customer Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({email : \"testuser@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "65cde088-84e9-4cd0-a838-5ce573cc9162",
              "parentUUID": "70a6eb79-e3b6-4363-b6f8-28c473465cff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "915a8ff6-2268-438d-8ba4-677e36329cce",
            "63e3d4ee-38af-4fe9-baab-73dc43232ca9",
            "f4ba5d3e-4329-467d-9fd0-bb2c4afa2aa9",
            "858adbab-e067-479b-9874-eaaa25bf64e3",
            "61077cd9-03a1-404b-a030-50fde7b8d693",
            "9b6af71d-e580-46d7-b828-8fbffb03aff1",
            "e4357de8-2e92-477c-848e-191048198621",
            "58f65d86-4fef-4f4e-9e80-cfaa6a32f8ce",
            "7ff1c4af-b4ff-43a1-9951-f053fe11fc82",
            "72a9d838-dddf-4e76-8a53-ddadf50a5258",
            "65cde088-84e9-4cd0-a838-5ce573cc9162"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1471,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ffd969e7-e375-48f9-af78-04446ab0c817",
          "title": "Invoice Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\invoice.tests.js",
          "file": "\\tests\\invoice.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return invoice created message as success",
              "fullTitle": "Invoice Routes Tests Suite should return invoice created message as success",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "3e42f646-280c-4ebe-b614-4c68833c1190",
              "parentUUID": "ffd969e7-e375-48f9-af78-04446ab0c817",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invoice records by center email",
              "fullTitle": "Invoice Routes Tests Suite should return invoice records by center email",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/serviceCenter')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.service_center_email,res.body[0].service_center_email,err)\n    done();\n});",
              "err": {},
              "uuid": "d39b6752-bc2a-45d6-acef-5676e9628bce",
              "parentUUID": "ffd969e7-e375-48f9-af78-04446ab0c817",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return invoice records by center email",
              "fullTitle": "Invoice Routes Tests Suite should return invoice records by center email",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(app)\n    .post(api + '/get/user')\n    .send({ customer_email: mock.mockObject.customer_email })\n    .end((err, res) => {\n        res.should.have.status(200);\n        chai.assert.equal(mock.findObject.customer_email, res.body[0].customer_email, err)\n        done();\n    });",
              "err": {},
              "uuid": "1223a1a5-505e-48c0-b94b-5d2f008570e6",
              "parentUUID": "ffd969e7-e375-48f9-af78-04446ab0c817",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service record that was created",
              "fullTitle": "Invoice Routes Tests Suite should delete service record that was created",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({service_center_email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\", res.body.message, err)\n    done();\n});",
              "err": {},
              "uuid": "77e822d9-0724-4e3e-9125-32df72a3b5fb",
              "parentUUID": "ffd969e7-e375-48f9-af78-04446ab0c817",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e42f646-280c-4ebe-b614-4c68833c1190",
            "d39b6752-bc2a-45d6-acef-5676e9628bce",
            "1223a1a5-505e-48c0-b94b-5d2f008570e6",
            "77e822d9-0724-4e3e-9125-32df72a3b5fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 331,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
          "title": "Service Center Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\serviceCenter.tests.js",
          "file": "\\tests\\serviceCenter.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return service center created message as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center created message as success",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "a0dad311-71d5-46e9-8340-5173b13891c4",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that service center email already exists",
              "fullTitle": "Service Center Routes Tests Suite should return that service center email already exists",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "9aadff0a-0d71-42b0-b110-56a0f042157f",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as success",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as success",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"testservicecenter@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "12d6fdc8-2536-40b1-8c49-dc87b52b3a80",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return service center login as Incorrect Username or Password",
              "fullTitle": "Service Center Routes Tests Suite should return service center login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password })\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "bf7ecf6f-1dee-451a-996e-8d9e9e17c2c9",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center information by name",
              "fullTitle": "Service Center Routes Tests Suite should return the service center information by name",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/name')\n  .send({name : mock.mockObject.name})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "37095449-352c-4343-9da8-082f490d1374",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center information by email",
              "fullTitle": "Service Center Routes Tests Suite should return the service center information by email",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/email')\n  .send({email : mock.mockObject.email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.name,res.body.name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "a3f822ea-f16f-476a-96a0-73df5b149960",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service centers by location",
              "fullTitle": "Service Center Routes Tests Suite should return the service centers by location",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/location')\n  .send({location : mock.mockObject.location})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "ee096117-2720-4410-9cc3-6f6ee5c997d0",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service centers by rating",
              "fullTitle": "Service Center Routes Tests Suite should return the service centers by rating",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/rating')\n  .send({rating : \"5\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "78358b8f-ce90-4d88-8e10-247127bdfa64",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update service center details and return success",
              "fullTitle": "Service Center Routes Tests Suite should update service center details and return success",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .put(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "3cb9458f-b6af-4643-827c-2d795931a7dc",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service center record that was created",
              "fullTitle": "Service Center Routes Tests Suite should delete service center record that was created",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "c8d34f07-1f5a-4de6-8f1e-f18c2a9e7993",
              "parentUUID": "ceb0363a-d6b7-46c1-a448-6f7af2e6ab8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0dad311-71d5-46e9-8340-5173b13891c4",
            "9aadff0a-0d71-42b0-b110-56a0f042157f",
            "12d6fdc8-2536-40b1-8c49-dc87b52b3a80",
            "bf7ecf6f-1dee-451a-996e-8d9e9e17c2c9",
            "37095449-352c-4343-9da8-082f490d1374",
            "a3f822ea-f16f-476a-96a0-73df5b149960",
            "ee096117-2720-4410-9cc3-6f6ee5c997d0",
            "78358b8f-ce90-4d88-8e10-247127bdfa64",
            "3cb9458f-b6af-4643-827c-2d795931a7dc",
            "c8d34f07-1f5a-4de6-8f1e-f18c2a9e7993"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "4055d308-046b-4492-aeb1-f735c6b99ebe",
          "title": "Service Record Routes Tests Suite",
          "fullFile": "E:\\Level 5\\SDGP\\Implementation\\20-03 Backend\\autowa_application\\server\\tests\\serviceRecord.tests.js",
          "file": "\\tests\\serviceRecord.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return service record created message as success",
              "fullTitle": "Service Record Routes Tests Suite should return service record created message as success",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "32910021-b75c-474b-afa5-2ccf20cf5861",
              "parentUUID": "4055d308-046b-4492-aeb1-f735c6b99ebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center service records by center email",
              "fullTitle": "Service Record Routes Tests Suite should return the service center service records by center email",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/serviceCenter/records')\n  .send({service_center_email : mock.mockObject.service_center_email})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.service_center_email,res.body[0].service_center_email,err)\n    done();\n});",
              "err": {},
              "uuid": "c59a1dcd-f453-481d-a333-73fc9a7996b2",
              "parentUUID": "4055d308-046b-4492-aeb1-f735c6b99ebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the service center service records by center email",
              "fullTitle": "Service Record Routes Tests Suite should return the service center service records by center email",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n    .request(app)\n    .post(api + '/get/user/records')\n    .send({ customer_email: mock.mockObject.customer_email })\n    .end((err, res) => {\n        res.should.have.status(200);\n        chai.assert.equal(mock.findObject.service_center_email, res.body[0].service_center_email, err)\n        done();\n    });",
              "err": {},
              "uuid": "b374810b-3327-4f08-a37d-eb04c3f41156",
              "parentUUID": "4055d308-046b-4492-aeb1-f735c6b99ebe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete service record that was created",
              "fullTitle": "Service Record Routes Tests Suite should delete service record that was created",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .delete(api+'/delete')\n  .send({service_center_email : \"testservicecenter@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\", res.body.message, err)\n    done();\n});",
              "err": {},
              "uuid": "8aa14fa3-1a72-413f-8a59-fc69056730b8",
              "parentUUID": "4055d308-046b-4492-aeb1-f735c6b99ebe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32910021-b75c-474b-afa5-2ccf20cf5861",
            "c59a1dcd-f453-481d-a333-73fc9a7996b2",
            "b374810b-3327-4f08-a37d-eb04c3f41156",
            "8aa14fa3-1a72-413f-8a59-fc69056730b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 335,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}